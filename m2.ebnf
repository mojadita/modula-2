/* Modula-2 grammar.  Extracted from "MODULA-2"
 * Niklaus Wirth, ETH Zürich Institut für Informatik
 * 1980.
 * Date: Tue May  8 12:22:48 EEST 2018
 */

/* Lexical definitions */

/*
ident = letter { letter | digit } ;
letter =
	  'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I'
	| 'J' | 'L' | 'K' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R'
	| 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'
	| 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i'
	| 'j' | 'l' | 'k' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r'
	| 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' ;
number = integer | real ;
integer =  digit { digit }
	| octalDigit { octalDigit } ( 'B' | 'C' )
	| digit { hexDigit } 'H' ;
real = digit { digit } '.' { digit } [ ScaleFactor ] ;
ScaleFactor = 'E' [ '+' | '-' ] digit { digit } ;
hexDigit = digit | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' ;
digit = octalDigit | '8' | '9' ;
octalDigit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' ; 
string = '''' { character } ''''
	| '"' { character } '"' ;

qualident = { mod_ident '.' } ident ;
*/

/* 5. Constant declarations */

ConstantDeclaration: ident '=' ConstExpression ;

ConstExpression:
      SimpleConstExpr [ relation SimpleConstExpr ] ;

relation: '=' | '#' | '<>' | '<' | '<=' | '>' | '>=' | 'IN' ;

SimpleConstExpr: [ '+' | '-' ] ConstTerm { AddOperator ConstTerm } ;

AddOperator: '+' | '-' | 'OR' ;

ConstTerm: ConstFactor { MulOperator ConstFactor } ;

MulOperator: '*' | '/' | 'DIV' | 'MOD' | 'AND' | '&' ;

ConstFactor:
	  qualident | number | string | set
	| '(' ConstExpression ')'
	| 'NOT' ConstFactor ;

set: [ qualident ] '{' [ element { ',' element } ] '}';

element: ConstExpression [ '..' ConstExpression ] ;

/* 6. Type declarations */

TypeDeclaration: ident '=' type ;

type:
	  SimpleType
	| ArrayType
	| RecordType
	| SetType
	| PointerType
	| ProcedureType ;

SimpleType:
	  qualident
	| enumeration
	| SubrangeType ;

/* 6.2. Enumerations */

enumeration: '(' IdentList ')' ;
IdentList: ident { ',' ident } ;

/* 6.3. Subrange types */

SubrangeType: '[' ConstExpression '..' ConstExpression ']' ;

/* 6.4 Array types */

ArrayType: 'ARRAY' SimpleType { ',' SimpleType } 'OF' type;

/* 6.5. Record types */

RecordType: 'RECORD' FieldListSequence 'END' ;

FieldListSequence: FieldList { ';' FieldList } ;

FieldList: [ IdentList ':' type |
	'CASE' [ ident ':' ] qualident 'OF'
		variant { '|' variant }
	[ 'ELSE' FieldListSequence ] 'END' ] ;

variant: CaseLabelList ':' FieldListSequence ;

CaseLabelList: CaseLabels { ',' CaseLabels } ;

CaseLabels: ConstExpression [ '..' ConstExpression ] ;

/* 6.6. Set types */

SetType: 'SET' 'OF' SimpleType ;

/* 6.7. Pointer types */

PointerType: 'POINTER' 'TO' type ;

/* 6.8 Procedure types */

ProcedureType: 'PROCEDURE' [ FormalTypeList ] ;

FormalTypeList: '(' [ [ 'VAR' ] FormalType
	{ ',' [ 'VAR' ] FormalType } ] ')' [ ':' qualident ] ;

/* 7. Variable declarations */

VariableDeclaration: IdentList ':' type ;

/* 8. Expressions */
/* 8.1. Operands */

designator: qualident { '.' ident | '[' ExpList ']' | '^' } ;

ExpList: expression { ',' expression } ;

/* 8.2 Operators */

expression: SimpleExpression [ relation SimpleExpression ] ;

SimpleExpression: [ '+' | '-' ] term { AddOperator term } ;

term: factor { MulOperator factor } ;

factor: number | string | set | designator [ ActualParameters ]
	| '(' expression ')' | 'NOT' factor ;

ActualParameters: '(' [ ExpList ] ')' ;

/* 9. Statements */

statement: [ assignment | ProcedureCall
	| IfStatement | CaseStatement | WhileStatement
	| RepeatStatement | LoopStatement | ForStatement
	| WithStatement | 'EXIT' | 'RETURN' [ expression ] ] ;

/* 9.1. Assignments */

assignment: designator ':=' expression ;

/* 9.2. Procedure calls */

ProcedureCall: designator [ ActualParameters ] ;

/* 9.3. Statement sequences */

StatementSequence: statement { ';' statement } ;

/* 9.4. If statement */

IfStatement:
	  'IF' expression 'THEN' StatementSequence
	{ 'ELSIF' expression 'THEN' StatementSequence }
	[ 'ELSE' StatementSequence ] 'END' ;

/* 9.5. Case statements */

CaseStatement: 'CASE' expression 'OF' case { '|' case }
	[ 'ELSE' StatementSequence ] 'END' ;

case: CaseLabelList ':' StatementSequence ;

/* 9.6. While statements */

WhileStatement: 'WHILE' expression 'DO' StatementSequence 'END' ;

/* 9.7. Repeat statements */

RepeatStatement: 'REPEAT' StatementSequence UNTIL expression ;

/* 9.8. For statements */

ForStatement: 'FOR' ident ':=' expression TO expression
	[ 'BY' ConstExpression ] 'DO' StatementSequence 'END' ;

/* 9.9. Loop statements */

LoopStatement: 'LOOP' StatementSequence 'END' ;

/* 9.10. With statements */

WithStatement: 'WITH' designator 'DO' StatementSequence 'END' ;

/* 10. Procedure declarations */

ProcedureDeclaration: ProcedureHeading ';' block ident ;

ProcedureHeading: 'PROCEDURE' ident [ FormalParameters ] ;

block: { declaration } [ 'BEGIN' StatementSequence ] 'END' ;

declaration: 'CONST' { ConstantDeclaration ';' }
	| 'TYPE' { TypeDeclaration ';' }
	| 'VAR' { VariableDeclaration ';' }
	| ProcedureDeclaration ';'
	| ModuleDeclaration ';'
	;

/* 10.1. Formal parameters */

FormalParameters: '(' [ FPSection { ';' FPSection } ] ')' [ ':' qualident ] ;

FPSection: [ 'VAR' ] IdentList ':' FormalType ;

FormalType: [ 'ARRAY' 'OF' ] qualident ;

/* 11. Modules */

ModuleDeclaration: 'MODULE' ident [ priority ] ';' { import } [ export ] block ident ;

priority: '[' Const_Expression ']' ;

export: 'EXPORT' [ 'QUALIFIED' ] IdentList ';' ;

import: [ 'FROM' ident ] 'IMPORT' IdentList ';' ;

/* 14. Compilation Units */

DefinitionModule: 'DEFINITION' 'MODULE' ident ';' { import }
	[ export ] { definition } 'END' ident ;

definition: 'CONST' { ConstantDeclaration ';' }
	| 'TYPE' { ident [ '=' type ] ';' }
	| 'VAR' { VariableDeclaration ';' }
	| ProcedureHeading ';'
	;

ProgramModule: 'MODULE' ident [ priority ] ';' { import } block ident '.' ;

CompilationUnit: DefinitionModule '.' |
	[ 'IMPLEMENTATION' ] ProgramModule '.' ;
